import requests
import csv
import logging


class DetctionsClient:

    BASEURL = "http://interview.vulcancyber.com:3000/"

    def request(self, method, path, headers="", data=""):
        if method == 'GET':
            try:
                servers = requests.get(path, headers=headers)
                return servers.json()
            except requests.exceptions.HTTPError as errh:
                return errh
            except requests.exceptions.ConnectionError as errc:
                return errc
            except requests.exceptions.Timeout as errt:
                return errt
            except requests.exceptions.RequestException as err:
                return err
        if method == 'POST':
            try:
                vulnerabilities = requests.post(path, json=data)
                return vulnerabilities.json()
            except requests.exceptions.HTTPError as errh:
                return errh
            except requests.exceptions.ConnectionError as errc:
                return errc
            except requests.exceptions.Timeout as errt:
                return errt
            except requests.exceptions.RequestException as err:
                return err
            
    def get_servers(self):
        header = dict()
        header["Authorization"] = "Aa123456!"
        return self.request('GET', self.BASEURL + "servers", headers=header)

    def get_vulnerabilities(self):
        data = {"startId": 1, "amount": 100}
        return self.request('POST', self.BASEURL + "vulns", data=data)

    def check_vulnerability(self):
        servers_vulns = []
        servers = self.get_servers()
        vulnerabilities = self.get_vulnerabilities()
        for vul in vulnerabilities:
            for server in servers:
                if "affects" in vul:
                    os = vul["affects"].split("_")[0]
                    osVersion = vul["affects"].split("_")[1]
                if "os" in server and "osVersion" in server:
                    if os == server["os"] and osVersion == server["osVersion"]:
                        servers_vulns.append({**vul, **server})
        return servers_vulns

    def check_existence(self, potensial, s):
        if s in potensial:
            return potensial[s]
        else:
            return "not found"

    def check_rules(self):
        logging.basicConfig(filename='detctions.log', level=logging.DEBUG)
        lst = [*csv.DictReader(open('rules.csv'))];
        len_ = len(lst)
        potentials = self.check_vulnerability()
        for potential in potentials:
            count_rules = 0
            for rule in lst:
                if rule["operator"] == "eq":
                    if potential[rule["parameter"]] == rule["value"]:
                       count_rules += 1
                elif rule["operator"] == "lt":
                    if potential[rule["parameter"]] < rule["value"]:
                        count_rules += 1
                elif rule["operator"] == "gt":
                    if potential[rule["parameter"]] > float(rule["value"]):
                        count_rules += 1
            if count_rules == len_:
                name = self.check_existence(potential,"name")
                risk = self.check_existence(potential,"risk")
                hostname = self.check_existence(potential,"hostname")
                ip = self.check_existence(potential,"ip")
                logging.info("vulnerability {} with risk {} discovered on {} {}".format(name, risk, hostname, ip))



# d = DetctionsClient()
# DetctionsClient.check_rules(d)

